Index: bindsnet/environment/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bindsnet/environment/__init__.py	(revision e9785fcba409c6d99b3f07e3ecbb3415b514e6f3)
+++ bindsnet/environment/__init__.py	(date 1556727458717)
@@ -81,6 +81,9 @@
         :param train: Whether to use train or test dataset.
         :param time: Length of spike train per example.
         :param kwargs: Raw data is multiplied by this value.
+
+         Keyword arguments:
+         :param gpu: whether or not to use GPU
         """
         self.dataset = dataset
         self.train = train
@@ -89,6 +92,13 @@
         # Keyword arguments.
         self.intensity = kwargs.get('intensity', 1)
         self.max_prob = kwargs.get('max_prob', 1)
+        self.gpu = kwargs.get('gpu', False)
+
+        if self.gpu and torch.cuda.is_available():
+            torch.set_default_tensor_type('torch.cuda.FloatTensor')
+
+        self.device = torch.device("cuda" if self.gpu and torch.cuda.is_available() else "cpu")
+        torch.cuda.device(self.device)
 
         assert 0 < self.max_prob <= 1, 'Maximum spiking probability must be in (0, 1].'
 
@@ -101,6 +111,9 @@
             self.data, self.labels = self.dataset.get_test()
             self.label_loader = iter(self.labels)
 
+        self.data.to(self.device)
+        self.labels.to(self.device)
+
         self.env = iter(self.data)
 
     def step(self, a: int = None) -> Tuple[torch.Tensor, int, bool, Dict[str, int]]:
@@ -113,7 +126,7 @@
         """
         try:
             # Attempt to fetch the next observation.
-            self.obs = next(self.env)
+            self.obs = next(self.env).to(self.device)
         except StopIteration:
             # If out of samples, reload data and label generators.
             self.env = iter(self.data)
@@ -124,7 +137,7 @@
         self.preprocess()
 
         # Info dictionary contains label of MNIST digit.
-        info = {'label' : next(self.label_loader)}
+        info = {'label': next(self.label_loader).to(self.device)}
 
         return self.obs, 0, False, info
 
Index: bindsnet/pipeline/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bindsnet/pipeline/__init__.py	(revision e9785fcba409c6d99b3f07e3ecbb3415b514e6f3)
+++ bindsnet/pipeline/__init__.py	(date 1556726888170)
@@ -54,6 +54,7 @@
         :param str plot_type: Type of plotting ('color' or 'line').
         :param int reward_window: Moving average window for the reward plot.
         :param int reward_delay: How many iterations to delay delivery of reward.
+        :param gpu: whether or not to use GPU
         """
         self.network = network
         self.env = environment
@@ -85,6 +86,13 @@
         self.plot_type = kwargs.get('plot_type', 'color')
         self.reward_window = kwargs.get('reward_window', None)
         self.reward_delay = kwargs.get('reward_delay', None)
+        self.gpu = kwargs.get('gpu', False)
+
+        if self.gpu and torch.cuda.is_available():
+            torch.set_default_tensor_type('torch.cuda.FloatTensor')
+
+        device = torch.device("cuda" if self.gpu and torch.cuda.is_available() else "cpu")
+        torch.cuda.device(device)
 
         self.dt = network.dt
         self.timestep = int(self.time / self.dt)
